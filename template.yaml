AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS SAM template
Resources:
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Cors: "'*'"
      Auth:
        Authorizers:
          MyCognitoAuthorizer:
            UserPoolArn: !ImportValue 'CognitoArn'
            Identity:
              Header: Authorization

  ApiFunction:
    Type: AWS::Serverless::Function 
    Properties:
      CodeUri: ./
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.7
      Tracing: Active
      Environment:
        Variables:
          database_name: !ImportValue 'DBname'
          db_cluster_arn: 
            !Sub 
                - 'arn:aws:rds:us-east-1:581209585450:cluster:${clustername}'
                - clustername:
                    Fn::ImportValue: "Clustername"
          db_credentials_secrets_store_arn: !ImportValue 'SecretsArn'
      VpcConfig:
        SubnetIds:
          - subnet-0b90441611c4b9a3e
          - subnet-0415d65a0dade3f67 
        SecurityGroupIds:
          - sg-0af396943d01e2851
      Events:
        ApiEvent:
          Type: Api 
          Properties:
            Path: /tempp
            Method: get
            Auth:
              Authorizer: MyCognitoAuthorizer
            RestApiId:
              Ref: ApiGatewayApi

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/AWSXRayDaemonWriteAccess
        - arn:aws:iam::aws:policy/AmazonRDSDataFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole

  RDSEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              AWS:
                - !GetAtt LambdaExecutionRole.Arn
            Action:
              - 'rds-data:ExecuteStatement'
            Resource:
              - !Sub
                - 'arn:aws:rds:us-east-1:581209585450:cluster:${clustername}'
                - clustername:
                    Fn::ImportValue: "Clustername"
      ServiceName: 'com.amazonaws.us-east-1.rds-data'
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      VpcId: vpc-2eef3b54
      SubnetIds:
        - subnet-0b90441611c4b9a3e
        - subnet-0415d65a0dade3f67
      SecurityGroupIds:
        - sg-b34a8afe